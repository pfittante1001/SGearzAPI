// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SGearzAPI.API.Data;

namespace SGearzAPI.API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034");

            modelBuilder.Entity("SGearzAPI.API.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryImageUrl");

                    b.Property<string>("CategoryName");

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SGearzAPI.API.Model.CustAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<int>("CustomerID");

                    b.Property<bool>("IsBilling");

                    b.Property<bool>("IsShipping");

                    b.Property<string>("State");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustAddresses");
                });

            modelBuilder.Entity("SGearzAPI.API.Model.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Chest");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<char>("Gender");

                    b.Property<double>("Height");

                    b.Property<double>("Hip");

                    b.Property<string>("LastName");

                    b.Property<int>("Neck");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Phone");

                    b.Property<double>("Shoulders");

                    b.Property<double>("Sleeve");

                    b.Property<string>("UserName");

                    b.Property<double>("Waist");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SGearzAPI.API.Model.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CustomerID");

                    b.Property<float>("Frieght");

                    b.Property<DateTime>("OderDate");

                    b.Property<DateTime>("OrderDate");

                    b.Property<string>("OrderNumber");

                    b.Property<DateTime>("RequiredDate");

                    b.Property<DateTime>("ShipDate");

                    b.Property<string>("TransactionStatus");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SGearzAPI.API.Model.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BillDate");

                    b.Property<string>("Color");

                    b.Property<float>("Discount");

                    b.Property<bool>("IsComplete");

                    b.Property<int?>("OrderID");

                    b.Property<float>("Price");

                    b.Property<int?>("ProductID");

                    b.Property<int>("Quantity");

                    b.Property<DateTime>("ShipDate");

                    b.Property<string>("Size");

                    b.Property<float>("Total");

                    b.HasKey("Id");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("SGearzAPI.API.Model.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AvaiableSize");

                    b.Property<string>("AvailableColor");

                    b.Property<int?>("CategoryId");

                    b.Property<int?>("CateoryID");

                    b.Property<string>("Color");

                    b.Property<DateTime>("DateListed");

                    b.Property<bool>("DiscountAvailable");

                    b.Property<bool>("IsUsed");

                    b.Property<float>("MSRP");

                    b.Property<bool>("ProductAvailable");

                    b.Property<string>("ProductDescription");

                    b.Property<string>("ProductName");

                    b.Property<int>("QuantityPerUnit");

                    b.Property<int>("ReOrderLevel");

                    b.Property<string>("Size");

                    b.Property<int?>("SupplierID");

                    b.Property<float>("UnitPrice");

                    b.Property<float>("UnitWeight");

                    b.Property<int>("UnitsInStock");

                    b.Property<int>("UnitsOnOrder");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SGearzAPI.API.Model.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImageName");

                    b.Property<string>("ImgUrl");

                    b.Property<bool>("IsMain");

                    b.Property<int>("ProductID");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("SGearzAPI.API.Model.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactFName");

                    b.Property<string>("ContactLName");

                    b.Property<bool>("CurrentOrder");

                    b.Property<string>("DiscountType");

                    b.Property<string>("Email");

                    b.Property<string>("PaymentMethods");

                    b.Property<string>("Phone");

                    b.Property<string>("SupplierName");

                    b.Property<string>("WebSiteUrl");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("SGearzAPI.API.Model.SupplierAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<bool>("IsMain");

                    b.Property<int?>("ProductId");

                    b.Property<string>("State");

                    b.Property<int?>("SupplierID");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierID");

                    b.ToTable("SupplierAddresses");
                });

            modelBuilder.Entity("SGearzAPI.API.Model.CustAddress", b =>
                {
                    b.HasOne("SGearzAPI.API.Model.Customer", "Customer")
                        .WithMany("CustAddresses")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SGearzAPI.API.Model.Order", b =>
                {
                    b.HasOne("SGearzAPI.API.Model.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID");
                });

            modelBuilder.Entity("SGearzAPI.API.Model.OrderDetail", b =>
                {
                    b.HasOne("SGearzAPI.API.Model.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID");

                    b.HasOne("SGearzAPI.API.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID");
                });

            modelBuilder.Entity("SGearzAPI.API.Model.Product", b =>
                {
                    b.HasOne("SGearzAPI.API.Model.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("SGearzAPI.API.Model.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierID");
                });

            modelBuilder.Entity("SGearzAPI.API.Model.ProductImage", b =>
                {
                    b.HasOne("SGearzAPI.API.Model.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SGearzAPI.API.Model.SupplierAddress", b =>
                {
                    b.HasOne("SGearzAPI.API.Model.Product")
                        .WithMany("SupplierAddresses")
                        .HasForeignKey("ProductId");

                    b.HasOne("SGearzAPI.API.Model.Supplier", "Supplier")
                        .WithMany("SupplierAddress")
                        .HasForeignKey("SupplierID");
                });
#pragma warning restore 612, 618
        }
    }
}
